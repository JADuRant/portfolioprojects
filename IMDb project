–change table name–
ALTER TABLE  IMDBTop250MoviesCleanedIMDBTop250Movies RENAME TO Movies

SELECT * 
FROM Movies

–Top 5 movies budgeted movies–
SELECT name, budget
FROM Movies
ORDER BY budget DESC
LIMIT 5

–Princess Mononoke update–
UPDATE Movies
SET budget = REPLACE(budget, 2400000000, 23500000)

–3 Idiots Update–
UPDATE Movies 
SET budget = REPLACE(budget, 550000000, 6700000)


-updated top 5 budget movies-
SELECT name, budget
FROM Movies
Order by budget DESC
LIMIT 5

-five highest rated movies-
SELECT name, rating
FROM Movies
ORDER BY rating DESC
LIMIT 5

--top 5 box office hits--
SELECT name, box_office
 FROM Movies
 GROUP BY name 
 ORDER BY box_office DESC
 LIMIT 5

--top 10 highest profit--
 SELECT name, budget, box_office, (box_office - budget) AS profit 
 FROM Movies
 ORDER BY profit DESC
 LIMIT 10

 --Most popular genres--
SELECT genre, COUNT(*) AS genre_count
FROM (
  SELECT TRIM(value) AS genre
  FROM Movies
  CROSS JOIN json_each('["' || REPLACE(genre, ',', '","') || '"]')
)
GROUP BY genre
ORDER BY genre_count DESC
LIMIT 5

--Break down and explain each row of this query 
We are creating a subquery to create a temp table 
TRIM function is used to remove any leading or trailing extra spaces from the genre
Cross join line is to perform cross join operation with the json_each function, which will extract elements from a JASON array
Cross join combines every row from both tables essentially creating a new table where each row from the first table is paired with every row from the second.
In SQLite the json_each function is used to extract the elements of an array as individual rows in the result set
REPLACE(genre,’,’’”,’”) replaces commas in the genre column with double quotation marks and a comma, effectively splitting the “genre” values into individual elements of a JSON array 
The concat operator of the 2 “Pipes” is used to combine the opening and closing brackets of the JSON array, along with the modified genre values this is specific to SQLite and other platforms it would be concat()
The json_each function is then applied to the resulting JSON array, treating each element as a separate row. The single quotes surrounding the JSON array indicate that this is a string--

 --top 10 directors--
 SELECT directors, COUNT(*) AS Number_of_movies
 FROM Movies
 GROUP BY directors
 ORDER BY COUNT(*) DESC
 Limit 10

